generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://test@localhost:8889/gulan"
}

model Item {
  id               String          @id @default(uuid())
  category         ItemCategory    @relation(fields: [category_id], references: [id])
  category_id      String
  name             String
  code             String?
  selling_price    Float
  purchasedItem    purchasedItem[]
  color            Color?          @relation(fields: [color_id], references: [id])
  color_id         String?
  size             Size?           @relation(fields: [size_id], references: [id])
  size_id          String?
  orderedProducts  OrderedItem [] 
  @@map(name: "item")
}

model Size {
  id    String @id @default(uuid())
  size  String
  items Item[]

  @@map(name: "size")
}

model Color {
  id    String @id @default(uuid())
  color String
  items Item[]

  @@map(name: "color")
}

model purchasedItem {
  id                String        @id @default(uuid())
  item              Item          @relation(fields: [item_id], references: [id])
  item_id           String
  purchaseOrder     PurchaseOrder @relation(fields: [purchase_order_id], references: [id])
  purchase_order_id String
  qty               Int
  price             Float

  @@map(name: "purchased_item")
}

model User {
  id         String  @id @default(uuid())
  username   String  @unique @db.VarChar(255)
  password   String  @db.VarChar(255)
  role       String
  themeColor Boolean @default(true)
  orders     Order[]

  @@map(name: "user")
}

model ItemCategory {
  id    String @id @default(uuid())
  name  String
  items Item[]

  @@map(name: "item_category")
}

model PurchaseOrder {
  id             String          @id @default(uuid())
  purchased_at   DateTime        @default(now())
  purchasedItems purchasedItem[]
  @@map(name: "purchase_order")
}

model Vendor {
  id             String          @id @default(uuid())
  name           String
  @@map(name: "vendor")
}

model ExpenseCategory {
  id       String    @id @default(uuid())
  name     String
  expenses Expense[]

  @@map(name: "expense_category")
}

model Expense {
  id          String          @id @default(uuid())
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  description String
  amount      Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map(name: "expense")
}

model Order {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [user_id], references: [id])
  user_id         String
  orderedItems OrderedItem[]
  discount        Float
  status          String
  date            DateTime
  description     String?
  updated         Boolean?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map(name: "order")
}

model OrderedItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [order_id], references: [id])
  order_id   String
  item      Item     @relation(fields: [item_id], references: [id])
  item_id   String
  qty  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map(name: "ordered_item")
}
